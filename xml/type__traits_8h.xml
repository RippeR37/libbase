<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="type__traits_8h" kind="file" language="C++">
    <compoundname>type_traits.h</compoundname>
    <includes local="no">tuple</includes>
    <includes local="no">utility</includes>
    <includedby refid="barrier__callback_8h" local="yes">base/barrier_callback.h</includedby>
    <includedby refid="bind__internals_8h" local="yes">base/bind_internals.h</includedby>
    <includedby refid="callback__internals_8h" local="yes">base/callback_internals.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>base/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structbase_1_1traits_1_1IdentityType" prot="public">base::traits::IdentityType</innerclass>
    <innerclass refid="structbase_1_1traits_1_1RemoveCVRef" prot="public">base::traits::RemoveCVRef</innerclass>
    <innerclass refid="structbase_1_1traits_1_1TypesRange" prot="public">base::traits::TypesRange</innerclass>
    <innerclass refid="structbase_1_1traits_1_1TypesRange_3_01Offset_00_01TupleType_00_01std_1_1index__sequence_3_01Indexes_8_8_8_01_4_01_4" prot="public">base::traits::TypesRange&lt; Offset, TupleType, std::index_sequence&lt; Indexes... &gt; &gt;</innerclass>
    <innerclass refid="structbase_1_1traits_1_1IsFunctionPointer" prot="public">base::traits::IsFunctionPointer</innerclass>
    <innerclass refid="structbase_1_1traits_1_1IsFunctionPointer_3_01T_07_5_08_07Args_8_8_8_08_4" prot="public">base::traits::IsFunctionPointer&lt; T(*)(Args...)&gt;</innerclass>
    <innerclass refid="structbase_1_1traits_1_1IsCapturelessLambda" prot="public">base::traits::IsCapturelessLambda</innerclass>
    <innerclass refid="structbase_1_1traits_1_1IsCapturelessLambda_3_01Lambda_00_01std_1_1enable__if__t_3_01traits_1_1If8dd78fe42ca6c93819d1e3d1f57c337" prot="public">base::traits::IsCapturelessLambda&lt; Lambda, std::enable_if_t&lt; traits::IsCapturelessLambdaSfinaeV&lt; Lambda &gt; &gt; &gt;</innerclass>
    <innernamespace refid="namespacebase">base</innernamespace>
    <innernamespace refid="namespacebase_1_1traits">base::traits</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="base/type_traits.h"/>
  </compounddef>
</doxygen>
