name: Ubuntu

on:
  push:
    branches:
      - develop
      - master
      - release/*
  pull_request:
  workflow_dispatch:

jobs:
  clang-format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.12
      with:
        source: '.'
        exclude: './third_party'
        clangFormatVersion: 12

  build:
    name: ${{ matrix.compiler.name }} ${{ matrix.build_type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        build_type: [Release, Debug]
        compiler: [
          {name: GCC 7, cc: gcc-7, cxx: g++-7},
          {name: GCC 8, cc: gcc-8, cxx: g++-8},
          {name: GCC 9, cc: gcc-9, cxx: g++-9},
          {name: GCC 10, cc: gcc-10, cxx: g++-10},
          {name: Clang 10, cc: clang-10, cxx: clang++-10},
          {name: Clang 11, cc: clang-11, cxx: clang++-11},
          {name: Clang 12, cc: clang-12, cxx: clang++-12}
        ]
        cmake_args: [""]
        code_coverage: [false]
        include:
          - os: ubuntu-20.04
            compiler: {name: CodeCoverage (gcov), cc: gcc-10, cxx: g++-10}
            build_type: Debug
            cmake_args: "-DLIBBASE_CODE_COVERAGE=ON"
            code_coverage: true
          - os: ubuntu-20.04
            compiler: {name: CodeCoverage (llvm-cov), cc: clang-12, cxx: clang++-12}
            build_type: Debug
            cmake_args: "-DLIBBASE_CODE_COVERAGE=ON"
            code_coverage: true

    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}

    steps:
      # Checkout repository
      - uses: actions/checkout@v2
        with:
          submodules: true

      # (Optional) Ensure required software is installed
      - name: (Optional) Add clang apt repository
        if: ${{ matrix.os == 'ubuntu-18.04' && startsWith(matrix.compiler.cc, 'clang') }}
        run: |
          sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main"
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main"
          sudo apt update
      - name: (Optional) Compiler instalation
        run: |
          if ! command -v ${{ matrix.compiler.cc }} &> /dev/null
          then
            sudo apt install ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}
          fi
      - name: (Optional) Clang-tidy installation
        if: ${{ startsWith(matrix.compiler.cc, 'clang') }}
        run: if ! command -v clang-tidy-10 &> /dev/null; then sudo apt install clang-tidy-10; fi
      - name: (Optional) Lcov installation
        if: ${{ matrix.code_coverage && startsWith(matrix.compiler.cc, 'gcc') }}
        run: if ! command -v lcov &> /dev/null; then sudo apt install lcov; fi
      - name: (Optional) llvm-cov & llvm-profdata installation
        if: ${{ matrix.code_coverage && startsWith(matrix.compiler.cc, 'clang') }}
        run: |
          if ! command -v llvm-cov-12 &> /dev/null; then sudo apt install llvm-cov-12; fi
          if ! command -v llvm-profdata-12 &> /dev/null; then sudo apt install llvm-profdata-12; fi

      # Build and test
      - name: CMake configuration
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.cmake_args }}
      - name: Building
        run: cmake --build build
      - name: Testing
        run: ctest --test-dir build

      # (Optional) Generate code coverage report and upload it
      # - 'gcov'-based is used with CI
      # - 'llvm-cov'-based is uploaded as an artifact
      - name: (Optional) Generate code coverage
        if: ${{ matrix.code_coverage }}
        run: cmake --build build --target coverage
      - name: (Optional) Upload code coverage to CI
        if: ${{ matrix.code_coverage && startsWith(matrix.compiler.cc, 'gcc') }}
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          verbose: true
      - name: (Optional) Upload code coverage as artifact
        if: ${{ matrix.code_coverage && startsWith(matrix.compiler.cc, 'clang') }}
        uses: actions/upload-artifact@v2
        with:
          name: llvm-cov-code-coverage-report
          path: build/coverage/
